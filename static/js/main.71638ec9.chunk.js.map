{"version":3,"sources":["components/Button.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","disabled","onClick","click","content","App","state","buy","sell","handleChangeBuy","e","target","value","length","setState","parseInt","handleChangeSell","handleAddChangeBuy","handleAddChangeSell","handleSubtractChangeBuy","handleSubtractChangeSell","this","zysk","toFixed","required","type","onChange","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71638ec9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button disabled={props.disabled} onClick={props.click}>\r\n      {props.content}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./Button\";\n\nclass App extends Component {\n  state = { buy: 0, sell: 0, disabled: true };\n\n  handleChangeBuy = e => {\n    if (e.target.value.length === 0) {\n      this.setState({ buy: 0 });\n    } else {\n      this.setState({ buy: parseInt(e.target.value) });\n    }\n  };\n  handleChangeSell = e => {\n    if (e.target.value.length === 0) {\n      this.setState({ sell: 0 });\n    } else {\n      this.setState({ sell: parseInt(e.target.value) });\n    }\n  };\n\n  handleAddChangeBuy = () => {\n    if (this.state.buy < 1000) {\n      this.setState({ buy: this.state.buy + 50 });\n    } else if (this.state.buy >= 1000 && this.state.buy < 10000) {\n      this.setState({ buy: this.state.buy + 100 });\n    } else if (this.state.buy >= 10000 && this.state.buy < 99999) {\n      this.setState({ buy: this.state.buy + 250 });\n    } else if (this.state.buy >= 100000 && this.state.buy < 999999) {\n      this.setState({ buy: this.state.buy + 1000 });\n    }\n  };\n\n  handleAddChangeSell = () => {\n    if (this.state.sell < 1000) {\n      this.setState({ sell: this.state.sell + 50 });\n    } else if (this.state.sell >= 1000 && this.state.sell <= 10000) {\n      this.setState({ sell: this.state.sell + 100 });\n    } else if (this.state.sell >= 10000 && this.state.sell <= 99999) {\n      this.setState({ sell: this.state.sell + 250 });\n    } else if (this.state.sell >= 100000 && this.state.sell <= 999999) {\n      this.setState({ sell: this.state.sell + 1000 });\n    }\n  };\n\n  handleSubtractChangeBuy = () => {\n    if (this.state.buy <= 0) {\n      this.setState({ buy: 0 });\n    } else if (this.state.buy <= 1000) {\n      this.setState({ buy: this.state.buy - 50 });\n    } else if (this.state.buy >= 1000 && this.state.buy <= 10000) {\n      this.setState({ buy: this.state.buy - 100 });\n    } else if (this.state.buy >= 10000 && this.state.buy <= 99999) {\n      this.setState({ buy: this.state.buy - 250 });\n    } else if (this.state.buy >= 100000 && this.state.buy <= 999999) {\n      this.setState({ buy: this.state.buy - 1000 });\n    }\n  };\n\n  handleSubtractChangeSell = () => {\n    if (this.state.sell <= 0) {\n      this.setState({ sell: 0 });\n    } else if (this.state.sell < 1000) {\n      this.setState({ sell: this.state.sell - 50 });\n    } else if (this.state.sell >= 1000 && this.state.sell <= 10000) {\n      this.setState({ sell: this.state.sell - 100 });\n    } else if (this.state.sell >= 10000 && this.state.sell <= 99999) {\n      this.setState({ sell: this.state.sell - 250 });\n    } else if (this.state.sell >= 100000 && this.state.sell <= 999999) {\n      this.setState({ sell: this.state.sell - 1000 });\n    }\n  };\n\n  render() {\n    const { buy, sell } = this.state;\n    const zysk = (sell - sell * 0.05).toFixed(0) - buy;\n\n    return (\n      <div>\n        <h1>FIFA KALKULATOR</h1>\n        <p>Kupno</p>\n        <Button\n          disabled={this.state.buy === 0 ? true : false}\n          content=\"-\"\n          click={this.handleSubtractChangeBuy}\n        />\n        <input\n          required=\"required\"\n          type=\"number\"\n          value={buy}\n          onChange={this.handleChangeBuy}\n        />\n        <Button content=\"+\" click={this.handleAddChangeBuy} />\n        <p>Sprzedaż</p>\n        <Button\n          disabled={this.state.sell === 0 ? true : false}\n          content=\"-\"\n          click={this.handleSubtractChangeSell}\n        />\n        <input type=\"number\" value={sell} onChange={this.handleChangeSell} />\n        <Button content=\"+\" name=\"buy\" click={this.handleAddChangeSell} />\n        <h3>Wartość podatku : {(buy * 0.05).toFixed(0)}</h3>\n        <h3>Wartość sprzedaży : {(buy - buy * 0.05).toFixed(0)}</h3>\n        <h3>Sprzedaj za minimum : {(buy / 0.95).toFixed(0)}</h3>\n        {sell === 0 ? null : <h3>Zysk : {zysk}</h3>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}